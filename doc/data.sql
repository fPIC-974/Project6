DROP DATABASE IF EXISTS test;
CREATE DATABASE test;
USE test;

-- Database creation

CREATE TABLE user (
id INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
firstName VARCHAR(30),
lastName VARCHAR(30),
email VARCHAR(50) NOT NULL UNIQUE,
password VARCHAR(255),
role VARCHAR(30),

PRIMARY KEY (id)
);

CREATE TABLE account (
id INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
name VARCHAR(30),
number INTEGER UNSIGNED NOT NULL,
user_id INTEGER UNSIGNED NULL,

PRIMARY KEY (id),
FOREIGN KEY (user_id) REFERENCES user (id)
);

CREATE TABLE balance (
id INTEGER UNSIGNED NOT NULL,
amount DECIMAL(10,2) NOT NULL DEFAULT 0.00,

FOREIGN KEY (id) REFERENCES user (id),
PRIMARY KEY (id)
);

CREATE TABLE connection (
user_id INTEGER UNSIGNED NOT NULL,
connection_id INTEGER UNSIGNED NOT NULL,

FOREIGN KEY (user_id) REFERENCES user (id),
FOREIGN KEY (connection_id) REFERENCES user (id),
PRIMARY KEY (user_id, connection_id),
CHECK (user_id != connection_id)
);

CREATE TABLE transfer (
id INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
amount DECIMAL(10,2) NOT NULL,
date DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
account_id INTEGER UNSIGNED NULL,
balance_id INTEGER UNSIGNED NULL,

PRIMARY KEY (id),
FOREIGN KEY (account_id) REFERENCES account (id),
FOREIGN KEY (balance_id) REFERENCES balance (id)
);

CREATE TABLE payment (
id INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
amount DECIMAL(10,2) NOT NULL,
date DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
description TEXT NOT NULL,
user_id INTEGER UNSIGNED NULL,
balance_id INTEGER UNSIGNED NULL,

PRIMARY KEY (id),
FOREIGN KEY (user_id) REFERENCES user (id),
FOREIGN KEY (balance_id) REFERENCES balance (id)
);
